@model Contactini.Models.Entities.Mission
@using Contactini.Models
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/ReceptionLayout.cshtml";
}

<style>
    .cent {
        background-color: white;
        width: 1200px;
        margin-top: 15px;
        margin-bottom: 15px;
        padding-bottom: 15px;
    }

    .pss {
        margin-left: 50px;
        margin-right: 0px;
    }
</style>

<div class="container cent ">
    <h3 class="well">Mettre à Jour</h3>
    <hr />
    @using (Html.BeginForm("Edit", "Missions", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
    <div class="form-horizontal pss">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Title) } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Description) }, @rows = "14", @cols = "40" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.StartDate) } })
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Duration) } })
                        @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address.StreetAddress, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Address.StreetAddress) } })
                        @Html.ValidationMessageFor(model => model.Address.StreetAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address.City, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Address.City) } })
                        @Html.ValidationMessageFor(model => model.Address.City, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address.State, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Address.State) } })
                        @Html.ValidationMessageFor(model => model.Address.State, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address.Country, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Address.Country) } })
                        @Html.ValidationMessageFor(model => model.Address.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address.PostalCode, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Address.PostalCode) } })
                        @Html.ValidationMessageFor(model => model.Address.PostalCode, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                @*<div class="form-group form-inline">
                    @Html.Label("Sector", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.DropDownList("Sectors", new SelectList(ViewBag.Sectors), htmlAttributes: new { @class = "form-control control-label" })
                    </div>
                </div>*@

                <div class="form-group form-inline">
                    <label class="control-label col-md-2">Sectors</label>
                    <div class="col-md-10">
                        @*@Html.DropDownList("Sectors", String.Empty)*@
                        @Html.DropDownListFor(model => model.Sector.Name, new SelectList(ViewBag.Sectors, "Value", "Text", Model.Sector.Name), htmlAttributes: new { @class = "form-control control-label", @Id = "sect", @onchange = "FillDomains()" })

                        @*@Html.DropDownListFor(model => model.Sector.ID, new SelectList(ViewBag.Sectors, "Value", "Text", Model.Sector.ID))*@
                        @Html.ValidationMessageFor(model => model.Sector.ID)
                    </div>
                </div>
                <div class="form-group form-inline">
                    @Html.Label("Domain", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @*@Html.DropDownList("Domains", String.Empty)*@
                        @*@Html.DropDownListFor(model => model.Domain.domainId, new SelectList(ViewBag.Domains, "Value", "Text", Model.Domain.domainId))*@
                        @Html.DropDownListFor(model => model.Domain.Name, new SelectList(ViewBag.Domains, "Value", "Text", Model.Domain.Name), htmlAttributes: new { @class = "form-control control-label", @Id = "dom" })

                        @Html.ValidationMessageFor(model => model.Domain.domainId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        <input type="file" id="Photo" name="upload" onchange="fileCheck(this)" />
                        <img src="@Url.Content(String.Format("{0}", Model.PhotoLink))" id="upIm" width="250" height="220" class="img1"/>                        
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>

            </div>
        </div>
        <div class="form-group" hidden="hidden">
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublishDate, new { htmlAttributes = new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.PublishDate) } })
                @Html.ValidationMessageFor(model => model.PublishDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" hidden="hidden">
            <div class="col-md-10">
                @Html.EditorFor(model => model.PhotoLink, new { htmlAttributes = new { @class = "form-control",@Id="pl" , placeholder = Html.DisplayNameFor(n => n.PhotoLink) } })
                @Html.ValidationMessageFor(model => model.PhotoLink, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
</div>

<script>
    function fileCheck(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            var y = "";
            reader.onload = function (e) {
                $('#upIm').attr('src', e.target.result);
            };
          
            reader.readAsDataURL(input.files[0]);
        }
    }
    function FillDomains() {
        var sectName = $('#sect').val();
        $.ajax({
            url: '/Missions/FillDomains',
            type: "GET",
            dataType: "JSON",
            data: { sector: sectName },
            contentType: "application/json; charset=utf-8",

            success: function (domains) {

                $("#dom").html(""); // clear before appending new list
                $.each(domains, function (i, str) {
                    console.log(str)
                    $("#dom").append(
                        $('<option></option>').val(str).html(str));
                });

            }
        });
    }

</script>

